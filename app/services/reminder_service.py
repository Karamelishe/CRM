import asyncio
import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from ..core.database import SessionLocal
from ..core.config import settings
from ..crud import crud
from .telegram_bot import telegram_bot

logger = logging.getLogger(__name__)


class ReminderService:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        
    async def check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        with SessionLocal() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            appointments = crud.get_appointments_needing_reminders(
                db, settings.reminder_hours_before
            )
            
            for appointment in appointments:
                if appointment.client.telegram_id:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    service = crud.get_service(db, appointment.service_id)
                    date_str = appointment.datetime.strftime('%d.%m.%Y')
                    time_str = appointment.datetime.strftime('%H:%M')
                    
                    reminder_text = (
                        f"üìÖ –£—Å–ª—É–≥–∞: {service.name}\n"
                        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                        f"üïê –í—Ä–µ–º—è: {time_str}\n\n"
                        f"üí° –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, "
                        f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º."
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    success = await telegram_bot.send_reminder(
                        appointment.client.telegram_id,
                        reminder_text
                    )
                    
                    if success:
                        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        crud.mark_reminder_sent(db, appointment.id)
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment.id}")
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment.id}")
                
                else:
                    logger.warning(f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {appointment.client.full_name} –Ω–µ—Ç Telegram ID")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.check_and_send_reminders,
            trigger=IntervalTrigger(minutes=30),
            id='reminder_check',
            name='–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
            replace_existing=True
        )
        
        self.scheduler.start()
        logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
reminder_service = ReminderService()
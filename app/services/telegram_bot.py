import logging
from datetime import datetime, timedelta
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, ContextTypes, filters
)
from sqlalchemy.orm import Session

from ..core.config import settings
from ..core.database import SessionLocal
from ..crud import crud
from ..schemas import schemas
from ..models.models import AppointmentStatus

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        self.application = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with SessionLocal() as db:
            # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram username
            client = None
            if user.username:
                client = db.query(crud.models.Client).filter(
                    crud.models.Client.telegram_username == user.username
                ).first()
            
            if client:
                # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
                if not client.telegram_id:
                    client.telegram_id = str(user.id)
                    db.commit()
                
                keyboard = [
                    [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")],
                    [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact_info")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"–ü—Ä–∏–≤–µ—Ç, {client.full_name}! üëã\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
                    "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        
        with SessionLocal() as db:
            client = crud.get_client_by_telegram_id(db, user_id)
            
            if not client:
                await query.edit_message_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            
            if query.data == "book_appointment":
                await self.show_services(query, db)
            elif query.data == "my_appointments":
                await self.show_my_appointments(query, db, client)
            elif query.data == "contact_info":
                await self.show_contact_info(query)
            elif query.data.startswith("book_service_"):
                service_id = int(query.data.split("_")[2])
                await self.book_service(query, db, client, service_id)
            elif query.data.startswith("cancel_appointment_"):
                appointment_id = int(query.data.split("_")[2])
                await self.cancel_appointment(query, db, client, appointment_id)
    
    async def show_services(self, query, db: Session):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏"""
        services = crud.get_services(db)
        
        if not services:
            await query.edit_message_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        keyboard = []
        for service in services:
            price_text = f" - {service.price // 100} —Ä—É–±." if service.price else ""
            keyboard.append([
                InlineKeyboardButton(
                    f"{service.name} ({service.duration_minutes} –º–∏–Ω){price_text}",
                    callback_data=f"book_service_{service.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )
    
    async def book_service(self, query, db: Session, client, service_id: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É"""
        service = crud.get_service(db, service_id)
        
        if not service:
            await query.edit_message_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
        tomorrow = datetime.now() + timedelta(days=1)
        appointment_time = tomorrow.replace(hour=10, minute=0, second=0, microsecond=0)
        
        appointment_data = schemas.AppointmentCreate(
            datetime=appointment_time,
            client_id=client.id,
            service_id=service_id,
            notes="–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        )
        
        appointment = crud.create_appointment(db, appointment_data, client.owner_id)
        
        await query.edit_message_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n"
            f"–£—Å–ª—É–≥–∞: {service.name}\n"
            f"–î–∞—Ç–∞: {appointment.datetime.strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {appointment.datetime.strftime('%H:%M')}\n\n"
            f"–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏ –∑–∞—Ä–∞–Ω–µ–µ."
        )
    
    async def show_my_appointments(self, query, db: Session, client):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        now = datetime.now()
        appointments = db.query(crud.models.Appointment).filter(
            crud.models.Appointment.client_id == client.id,
            crud.models.Appointment.datetime > now,
            crud.models.Appointment.status.in_([
                AppointmentStatus.SCHEDULED, 
                AppointmentStatus.CONFIRMED
            ])
        ).order_by(crud.models.Appointment.datetime).all()
        
        if not appointments:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        keyboard = []
        
        for appointment in appointments:
            service = crud.get_service(db, appointment.service_id)
            date_str = appointment.datetime.strftime('%d.%m.%Y %H:%M')
            status_emoji = "üìÖ" if appointment.status == AppointmentStatus.SCHEDULED else "‚úÖ"
            
            text += f"{status_emoji} {service.name}\n"
            text += f"   üìÖ {date_str}\n"
            if appointment.notes:
                text += f"   üìù {appointment.notes}\n"
            text += "\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {date_str}",
                    callback_data=f"cancel_appointment_{appointment.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def cancel_appointment(self, query, db: Session, client, appointment_id: int):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        appointment = db.query(crud.models.Appointment).filter(
            crud.models.Appointment.id == appointment_id,
            crud.models.Appointment.client_id == client.id
        ).first()
        
        if not appointment:
            await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        appointment.status = AppointmentStatus.CANCELLED
        db.commit()
        
        await query.edit_message_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
    
    async def show_contact_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        await query.edit_message_text(
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
            "Email: info@example.com\n"
            "–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n\n"
            "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
            "–ü–Ω-–ü—Ç: 09:00 - 18:00\n"
            "–°–±: 10:00 - 16:00\n"
            "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π"
        )
    
    async def send_reminder(self, chat_id: str, appointment_text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏"""
        if not self.application:
            return False
        
        try:
            await self.application.bot.send_message(
                chat_id=int(chat_id),
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n{appointment_text}"
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False
    
    def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        if not settings.telegram_bot_token:
            logger.warning("Telegram bot token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        self.application = Application.builder().token(settings.telegram_bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        return self.application
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.application:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBot()